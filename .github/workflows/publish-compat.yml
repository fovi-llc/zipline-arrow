name: Build and Publish Python Package (Poetry-compatible token)

on:
  release:
    types: [published]

permissions:
  contents: write  # Required for uploading release assets

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: publishing
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python: [ "cp310", "cp311", "cp312" ]
        arch: [ auto64 ]

    name: Build on ${{ matrix.os }}
    steps:
    - name: Checkout zipline
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        ref: ${{ github.event.inputs.version }}

    - name: Set Xcode version
      uses: maxim-lobanov/setup-xcode@v1
      if: ${{ matrix.os == 'macos-latest' }}
      with:
        xcode-version: latest-stable

    - name: Wheels macOS / Linux
      if: runner.os != 'Windows'
      uses: pypa/cibuildwheel@v2.21.1
      env:
        CIBW_ARCHS_LINUX: ${{ matrix.arch }}
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_BUILD: "${{ matrix.python }}-*"
        CIBW_SKIP: "*-musllinux_*"
        CIBW_ENVIRONMENT_MACOS: MACOSX_DEPLOYMENT_TARGET=10.15

    - name: Install MSVC amd64
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: amd64

    - name: Wheels Windows
      if: runner.os == 'Windows'
      uses: pypa/cibuildwheel@v2.21.1
      env:
        CIBW_BUILD: "${{ matrix.python }}-win_amd64"

    - name: Install cibuildwheel and build tools
      run: |
        python -m pip install --upgrade pip
        pip install cibuildwheel twine build

    - name: Build binary wheels with cibuildwheel
      run: cibuildwheel --output-dir dist
      env:
        CIBW_SKIP: "*-musllinux*"

    - name: Build source distribution (sdist)
      if: matrix.os == 'ubuntu-latest'
      run: python -m build --sdist --outdir dist

    - name: Upload artifacts to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*

    - name: Publish to PyPI with Poetry-compatible token
      if: matrix.os == 'ubuntu-latest'
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*
